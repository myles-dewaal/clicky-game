{"version":3,"sources":["components/jumbotron.js","components/imageCards.js","components/mainContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Card","props","key","id","onClick","handleClick","clicked","name","src","image","alt","style","size","MainContainer","state","images","message","score","topScore","imageOrder","forEach","index","setState","sort","Math","random","newScore","newTopScore","this","map","imageUrl","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAYeA,G,MAVG,WACd,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,aAAd,eACA,uBAAGA,UAAU,QAAb,sG,mCCIDC,EATF,SAACC,GACV,OACI,yBAAKF,UAAU,wDACfG,IAAKD,EAAME,GACXC,QAAS,kBAAMH,EAAMI,YAAYJ,EAAME,GAAIF,EAAMK,WAC7C,yBAAKH,GAAIF,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMM,KAAMI,MAAOV,EAAMW,S,OCoElEC,E,2MAtEXC,MAAQ,CACJC,SACAC,QAAS,2BACTC,MAAO,EACPC,SAAU,G,EAEdb,YAAc,SAACF,EAAIG,GACf,IAAMa,EAAa,EAAKL,MAAMC,OAE9B,GAAGT,EAIC,OAHAa,EAAWC,SAAQ,SAACX,EAAOY,GACvBF,EAAWE,GAAOf,SAAU,KAEzB,EAAKgB,SAAS,CACjBb,MAAOU,EAAWI,MAAK,kBAAMC,KAAKC,SAAW,MAC7CT,QAAS,qDACTC,MAAO,IAIXE,EAAWC,SAAQ,SAACX,EAAOY,GAC/BlB,IAAOM,EAAMN,KAChBgB,EAAWE,GAAOf,SAAU,MAHrB,MAOmB,EAAKQ,MAAzBI,EAPC,EAODA,SACFQ,EARG,EAOST,MACO,EACnBU,EAAcD,EAAWR,EAAWQ,EAAWR,EAErD,OAAO,EAAKI,SAAS,CACpBb,MAAOU,EAAWI,MAAK,kBAAMC,KAAKC,SAAW,MAC7CT,QAAS,yBACTC,MAAOS,EACPR,SAAUS,K,wEAKD,IAAD,OACJ,OACI,yBAAK5B,UAAU,qCACxB,yBAAKA,UAAU,2BACZ,2BAAI6B,KAAKd,MAAME,UAEhB,yBAAKjB,UAAU,0BACd,qCAAW6B,KAAKd,MAAMG,MAAtB,iBAA2CW,KAAKd,MAAMI,UACpC,8BAEpB,yBAAKnB,UAAU,aAEd,yBAAKA,UAAU,OACd6B,KAAKd,MAAMC,OAAOc,KAAI,SAAApB,GAAK,OAC3B,kBAAC,EAAD,CACCP,IAAKO,EAAMN,GACXA,GAAIM,EAAMN,GACVI,KAAME,EAAMF,KACZD,QAASG,EAAMH,QACfG,MAAOA,EAAMqB,SACbzB,YAAa,EAAKA,wB,GA5DG0B,aCSbC,MATf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.05f553cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Jumbotron = () => {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container text-center\">\r\n                <h1 className=\"display-4\">Memory Game</h1>\r\n                <p className=\"lead\">Click on any image to score a point. But if you click on an image twice, you loose! Good luck!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Jumbotron;","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"allCards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\" \r\n        key={props.id}\r\n        onClick={() => props.handleClick(props.id, props.clicked)}>\r\n            <img id={props.name} src={props.image} alt={props.name} style={props.size} />\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from './imageCards';\r\nimport images from \"../image.json\";\r\n\r\nclass MainContainer extends Component {\r\n    state = {\r\n        images,\r\n        message: \"Click an image to begin!\",\r\n        score: 0,\r\n        topScore: 0\r\n    };\r\n    handleClick = (id, clicked) => {\r\n        const imageOrder = this.state.images;\r\n\r\n        if(clicked){\r\n            imageOrder.forEach((image, index)=>{\r\n                imageOrder[index].clicked = false;\r\n            });\r\n            return this.setState({\r\n                image: imageOrder.sort(() => Math.random() - 0.5),\r\n                message: \"You guessed WRONG! -- Click an image to try again.\",\r\n                score: 0\r\n            })\r\n        }\r\n        else{\r\n            imageOrder.forEach((image, index) => {\r\n\t\t\t\tif (id === image.id) {\r\n\t\t\t\t\timageOrder[index].clicked = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst { topScore, score } = this.state;\r\n\t\t\tconst newScore = score + 1;\r\n\t\t\tconst newTopScore = newScore > topScore ? newScore : topScore;\r\n\r\n\t\t\treturn this.setState({\r\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\r\n\t\t\t\tmessage: \"You guessed correctly!\",\r\n\t\t\t\tscore: newScore,\r\n\t\t\t\ttopScore: newTopScore,\r\n\t\t\t})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container-fluid mainCardContainer\">\r\n\t\t\t<div className=\"gameMessage text-center\">\r\n\t\t\t\t\t\t<p>{this.state.message}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"gameScores text-center\">\r\n\t\t\t\t\t\t<p>Score: {this.state.score} | Top Score: {this.state.topScore}</p>\r\n                        <bR></bR>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t{this.state.images.map(image => (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={image.id}\r\n\t\t\t\t\t\t\tid={image.id}\r\n\t\t\t\t\t\t\tname={image.name}\r\n\t\t\t\t\t\t\tclicked={image.clicked}\r\n\t\t\t\t\t\t\timage={image.imageUrl}\r\n\t\t\t\t\t\t\thandleClick={this.handleClick}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainContainer;","import React from 'react';\nimport Jumbotron from './components/jumbotron';\nimport MainContainer from './components/mainContainer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbotron />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}